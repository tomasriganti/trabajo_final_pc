import pygame
from shapely.geometry import LineString
import math
import time

pygame.init()

# Configuración de la ventana
pygame.display.set_caption("F1 Simulation")
ICONO = pygame.image.load('ruta/a/tu/icono.png')  # Cambia la ruta por la correcta
pygame.display.set_icon(ICONO)
PANTALLA = pygame.display.set_mode((1000, 800))

# Colores y gráficos
COLOR_DE_FONDO = (34, 139, 34)
JUGADOR_1_COLOR = (0, 0, 255)
JUGADOR_2_COLOR = (255, 0, 0)

# Línea de meta
LINEA_META = LineString([(450, 350), (550, 350)])  # Ajusta las coordenadas según tu pista

# Configuración del reloj
clock = pygame.time.Clock()
TICKS_POR_SEGUNDO = 100

# Función para crear vehículos
def crear_vehiculo(x, y, color):
    return {"x": x, "y": y, "radius": 10, "color": color, "speed": 0, "max_speed": 0.5, 
            "acceleration": 0.0025, "friction": 0.001, "direction": 0, "angular_speed": 0.5}

# Reiniciar jugadores
def reiniciar_jugadores():
    jugador_1 = crear_vehiculo(500, 400, JUGADOR_1_COLOR)
    jugador_2 = crear_vehiculo(500, 420, JUGADOR_2_COLOR)
    return jugador_1, jugador_2

# Detectar cruce de línea de meta
def cruzo_linea_meta(jugador, linea_meta):
    trayectoria = LineString([(jugador["x"] - jugador["speed"], jugador["y"]),
                              (jugador["x"], jugador["y"])])
    return trayectoria.intersects(linea_meta)

# Mover vehículo
def mover_vehiculo(vehiculo, keys, controls):
    if keys[controls["up"]]:
        vehiculo["speed"] += vehiculo["acceleration"]
        vehiculo["speed"] = min(vehiculo["speed"], vehiculo["max_speed"])
    elif keys[controls["down"]]:
        vehiculo["speed"] -= vehiculo["acceleration"]
        vehiculo["speed"] = max(vehiculo["speed"], -vehiculo["max_speed"] / 2)
    else:
        vehiculo["speed"] *= (1 - vehiculo["friction"])
    
    if keys[controls["left"]]:
        vehiculo["direction"] += vehiculo["angular_speed"]
    if keys[controls["right"]]:
        vehiculo["direction"] -= vehiculo["angular_speed"]
    
    radianes = math.radians(vehiculo["direction"])
    vehiculo["x"] += vehiculo["speed"] * math.cos(radianes)
    vehiculo["y"] -= vehiculo["speed"] * math.sin(radianes)
    return vehiculo

# Actualizar jugador
def actualizar_jugador(jugador, linea_meta, tiempo_inicio, vueltas, keys, controles):
    jugador = mover_vehiculo(jugador, keys, controles)
    tiempo_vuelta = 0
    if cruzo_linea_meta(jugador, linea_meta):
        vueltas += 1
        tiempo_vuelta = (pygame.time.get_ticks() - tiempo_inicio) / 1000
        tiempo_inicio = pygame.time.get_ticks()
    return jugador, tiempo_inicio, vueltas, tiempo_vuelta

# Inicializar jugadores y variables
Jugador_1, Jugador_2 = reiniciar_jugadores()
controles_jugador_1 = {"up": pygame.K_w, "down": pygame.K_s, "left": pygame.K_a, "right": pygame.K_d}
controles_jugador_2 = {"up": pygame.K_UP, "down": pygame.K_DOWN, "left": pygame.K_LEFT, "right": pygame.K_RIGHT}
vueltas_jugador_1, vueltas_jugador_2 = 0, 0
tiempo_inicio_jugador_1, tiempo_inicio_jugador_2 = pygame.time.get_ticks(), pygame.time.get_ticks()

# Bucle principal
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    PANTALLA.fill(COLOR_DE_FONDO)

    # Dibujar línea de meta
    pygame.draw.line(PANTALLA, (255, 255, 0), (450, 350), (550, 350), 5)

    # Actualizar jugadores
    Jugador_1, tiempo_inicio_jugador_1, vueltas_jugador_1, tiempo_vuelta_jugador_1 = actualizar_jugador(
        Jugador_1, LINEA_META, tiempo_inicio_jugador_1, vueltas_jugador_1, keys, controles_jugador_1)

    Jugador_2, tiempo_inicio_jugador_2, vueltas_jugador_2, tiempo_vuelta_jugador_2 = actualizar_jugador(
        Jugador_2, LINEA_META, tiempo_inicio_jugador_2, vueltas_jugador_2, keys, controles_jugador_2)

    # Dibujar jugadores
    pygame.draw.circle(PANTALLA, Jugador_1["color"], (int(Jugador_1["x"]), int(Jugador_1["y"])), Jugador_1["radius"])
    pygame.draw.circle(PANTALLA, Jugador_2["color"], (int(Jugador_2["x"]), int(Jugador_2["y"])), Jugador_2["radius"])

    # Mostrar información en pantalla
    font = pygame.font.Font(None, 36)
    texto_info_1 = font.render(
        f"Jugador 1 - Vueltas: {vueltas_jugador_1}, Tiempo: {tiempo_vuelta_jugador_1:.2f} s", True, (255, 255, 255))
    texto_info_2 = font.render(
        f"Jugador 2 - Vueltas: {vueltas_jugador_2}, Tiempo: {tiempo_vuelta_jugador_2:.2f} s", True, (255, 255, 255))
    PANTALLA.blit(texto_info_1, (10, 10))
    PANTALLA.blit(texto_info_2, (10, 50))

    pygame.display.flip()
    clock.tick(TICKS_POR_SEGUNDO)

pygame.quit()
